/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.IFPUG.action;

import hibernate.IFPUG.IfpugEif;
import hibernate.IFPUG.IfpugEifDirectMethod;
import hibernate.IFPUG.IfpugEifRet;
import hibernate.IFPUG.IfpugFunction;
import hibernate.IFPUG.IfpugIlf;
import hibernate.IFPUG.IfpugIlfDirectMethod;
import hibernate.IFPUG.IfpugIlfRet;
import hibernate.IFPUG.IfpugProduct;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.hibernate.HibernateException;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import business.IFPUG.DataFunctionBusiness;
import business.IFPUG.FpCountBusiness;
import business.IFPUG.RequirementBusiness;
import business.IFPUG.UfpCountBusiness;
import struts.IFPUG.form.UfpCountForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-07-2010
 * 
 * XDoclet definition:
 * @struts.action path="/ufpCount_Derived" name="ufpCountForm" scope="request" validate="true"
 * @struts.action-forward name="success" path="/IFPUG/dataFunction/showDerived.jsp" contextRelative="true"
 * @struts.action-forward name="failure" path="/IFPUG/failure.jsp" contextRelative="true"
 */
public class UfpCount_DerivedAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws HibernateException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws HibernateException {
		UfpCountForm ufpCountForm = (UfpCountForm) form;// TODO Auto-generated method stub
		
		
		//获取从directMethod.JSP页面传过来的参数
		int type = new Integer(ufpCountForm.getType());//已转换成0、1的ILF\EIF
		int dfId = new Integer(ufpCountForm.getDfId());
		
		int ufpCount, complex, retCount = 0,detCount = 0;
		boolean result = false;
		int figure = 0;//用于记录方法是否为空
		DataFunctionBusiness dfb = new DataFunctionBusiness();
		IfpugIlf ilf = (IfpugIlf)dfb.queryIlfById(dfId);
		IfpugEif eif = (IfpugEif)dfb.queryEifById(dfId);
		IfpugProduct product = new IfpugProduct();

		
		UfpCountBusiness ucb = new UfpCountBusiness(); //调用计算功能的业务逻辑层
		RequirementBusiness rb = new  RequirementBusiness();
		FpCountBusiness fcb = new FpCountBusiness();
		
		if(type == 0){
			Object[] retList = ilf.getIfpugIlfRets().toArray();
			retCount = retList.length; //得到RET的个数
			for(Object r:retList){
				IfpugIlfRet ret = (IfpugIlfRet)r;
				detCount += ret.getIfpugIlfDets().size(); //得到DET的个数
			}
			complex = ucb.getComplex_valueMethod(detCount, retCount, type);//调用业务逻辑层函数，计复杂度
			ufpCount = ucb.getUfpCount(complex, type);//调用业务逻辑层函数，计算功能点个数
			
			IfpugIlfDirectMethod method = ilf.getIfpugIlfDirectMethod();
			if( method == null){//如果该ILF文件没有对应的方法，新增
				method = new IfpugIlfDirectMethod();
				figure = 1;
			}
			method.setComplex(Short.valueOf(String.valueOf(complex)));
			method.setDetValue(detCount);
			method.setRetValue(retCount);
			method.setMethodType(Short.valueOf("0"));
			method.setUfpValue(ufpCount);
			//更新数据库表ILF中UFPcount的值
			ilf.setUfpCount(ufpCount);
			product = ilf.getIfpugProduct();
			
			result = dfb.updateDataFunction(ilf);//更新数据库表中UFPcount的值
			method.setIfpugIlf(ilf);
			if(figure == 1){
				dfb.insertMethod(method); //调用业务逻辑层函数插入
			}
			else {//如果该ILF文件对应的方法已存在，更新
				dfb.updateMethod(method);
			}
		}
		else{
			Object[] retList = eif.getIfpugEifRets().toArray();
			retCount = retList.length; //得到RET的个数
			for(Object r:retList){
				IfpugEifRet ret = (IfpugEifRet)r;
				detCount += ret.getIfpugEifDets().size(); //得到DET的个数
			}
			complex = ucb.getComplex_valueMethod(detCount, retCount, type);//调用业务逻辑层函数，计复杂度
			ufpCount = ucb.getUfpCount(complex, type);//调用业务逻辑层函数，计算功能点个数
			IfpugEifDirectMethod method = eif.getIfpugEifDirectMethod();
			if(method == null){
				method = new IfpugEifDirectMethod();
				figure = 1;
			}
			method.setComplex(Short.valueOf(String.valueOf(complex)));
			method.setDetValue(detCount);
			method.setRetValue(retCount);
			method.setMethodType(Short.valueOf("0"));
			method.setUfpValue(ufpCount);
			//更新数据库表EIF中UFPcount的值
			eif.setUfpCount(ufpCount);
			product = eif.getIfpugProduct();
			
			result = dfb.updateDataFunction(eif);
			method.setIfpugEif(eif);
			if(figure == 1)	dfb.insertMethod(method);//调用业务逻辑层函数插入
			else dfb.updateMethod(method);
		}
		product.setMeasureStatus(Short.valueOf("1"));
		product.setUfpCount(fcb.dfpCount(product.getId())+fcb.tfpCount(product.getId()));
		rb.updateProduct(product); //估算完数据功能，产品已经部分估算。
		
		if(result==true){
			   return mapping.findForward("success");
		}else{
			   return mapping.findForward("failure");
		}
	}
}