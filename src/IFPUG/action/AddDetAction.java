/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.IFPUG.action;

import java.io.UnsupportedEncodingException;

import hibernate.IFPUG.IfpugEif;
import hibernate.IFPUG.IfpugEifDet;
import hibernate.IFPUG.IfpugEifRet;
import hibernate.IFPUG.IfpugIlf;
import hibernate.IFPUG.IfpugIlfDet;
import hibernate.IFPUG.IfpugIlfRet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.mapping.Set;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import business.IFPUG.DataFunctionBusiness;
import struts.IFPUG.form.DetForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-01-2010
 * 
 * XDoclet definition:
 * @struts.action path="/addDet" name="detForm" scope="request" validate="true"
 * @struts.action-forward name="success" path="/IFPUG/dataFunction/addDet.jsp" contextRelative="true"
 * @struts.action-forward name="failure" path="/IFPUG/failure.jsp" contextRelative="true"
 */
public class AddDetAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws HibernateException 
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws HibernateException, UnsupportedEncodingException {
		DetForm detForm = (DetForm) form;// TODO Auto-generated method stub
		
		Integer type = Integer.valueOf(detForm.getType());	//获取addDet.jsp页面传过来的type	
		Integer retId = Integer.valueOf(detForm.getRetId());//获取传过来的RETID
		
		DataFunctionBusiness dfb = new DataFunctionBusiness();
		IfpugIlfRet ilfRet = null;
		IfpugEifRet eifRet = null;
		Integer dfId;
		//下段代码用于获取dfId,分默认RET和非默认RET两种情况
		if(retId < 0){ //如果DET要添加在默认RET下
			dfId = Integer.valueOf(retId.toString().substring(1)); //根据retId获取dfId
		}
		else { //通过RET对象获取dfId.
			if(type == 0){
				ilfRet = (IfpugIlfRet)dfb.queryIlfRetById(retId);
				dfId = ilfRet.getIfpugIlf().getId();
			}
			else {
				eifRet = (IfpugEifRet)dfb.queryEifRetById(retId);
				dfId = eifRet.getIfpugEif().getId();
			}
		}
		//用于获取存在数据库中默认ret的ID。
		if(type == 0){ //如果是ILF的RET
			IfpugIlf ilf = (IfpugIlf)dfb.queryIlfById(dfId);			
			if(retId < 0){ //默认RET
				Object[] retList = ilf.getIfpugIlfRets().toArray();//获取对应数据功能文件下所有的RET
				for (Object r:retList){//找到下属列表中名字为default的RET
					IfpugIlfRet ret = (IfpugIlfRet)r;
					if(ret.getIlfRetName().equals("default"))  
					{
						ilfRet = ret; 
						break;	
					}
				}
			}
		}
		else {
			IfpugEif eif = new IfpugEif();
			if(retId < 0){
				Object[] retList = eif.getIfpugEifRets().toArray();//获取对应数据功能文件下所有的RET
				for (Object r:retList){//找到下属列表中名字为default的RET
					IfpugEifRet ret = (IfpugEifRet)r;
					if(ret.getEifRetName().equals("default"))  
					{
						eifRet = ret; 
						break;	
					}
				}
			}
		}
		
		boolean result = false;
		if(type == 0){//如果是ILF下的RET的DET
			//此段代码用于检测该ILF文件对应RET表下是否已存在默认RET，如果没有，插入
			if(ilfRet == null){//如果该dfId=-retId对应的ILF类型文件还没有默认RET的记录，插入记录
  				IfpugIlf ii = (IfpugIlf)dfb.queryIlfById(dfId);
  				IfpugIlfRet iir = new IfpugIlfRet();
  				iir.setIfpugIlf(ii);
  				iir.setIlfRetName("default");
  				iir.setIlfRetDesp("default ret for dets that belong to ilf directly.");
  				dfb.insertRet(iir);//将默认RET插入数据库
  				ilfRet = iir;
  			}
			
			//此段代码用于初始化DET，然后插入数据库
			IfpugIlfDet iid = new IfpugIlfDet();
			iid.setIfpugIlfRet(ilfRet);
			iid.setIlfDetDesp(new String(detForm.getDetDesp().getBytes("ISO-8859-1"),"GB2312"));
			iid.setIlfDetName(new String(detForm.getDetName().getBytes("ISO-8859-1"),"GB2312"));
			iid.setType(Short.valueOf(type.toString()));
			iid.setIlfId(dfId);
			result = dfb.insertDet(iid); //插入DET到数据库中
		}
		else{
			if(eifRet == null){//如果该dfId=-retId对应的EIF类型文件还没有默认RET的记录，插入记录
  				IfpugEif ie = (IfpugEif)dfb.queryEifById(-retId);
  				IfpugEifRet ier = new IfpugEifRet();
  				ier.setEifRetName("default");
  				ier.setIfpugEif(ie);
  				ier.setEifRetDesp("default ret for dets that belong to eif directly.");
  				dfb.insertRet(ier);
  				eifRet = ier;
  			}
			IfpugEifDet ied = new IfpugEifDet();
			ied.setEifDetDesp(new String(detForm.getDetDesp().getBytes("ISO-8859-1"),"GB2312"));
			ied.setEifDetName(new String(detForm.getDetName().getBytes("ISO-8859-1"),"GB2312"));
			ied.setIfpugEifRet(eifRet);
			ied.setType(Short.valueOf(type.toString()));
			ied.setEifId(dfId);
			result = dfb.insertDet(ied); //插入DET到数据库中
		}
		if(result==true){
			   return mapping.findForward("success");
		}else{
			   return mapping.findForward("failure");
		}
	}
}