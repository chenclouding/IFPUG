<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
<taglib>
<tlibversion>1.0</tlibversion>
<jspversion>1.2</jspversion>
<shortname>display</shortname>
<uri>http://displaytag.sf.net</uri>
<info>
        The display tag library is an open source suite of custom tags that provide high level web presentation patterns
        which will work in a MVC model, and provide a significant amount of functionality while still being simple and
        straight-forward to use. The primary tag in the library is the Table tag.
    </info>
<tag>
<name>table</name>
<tagclass>org.displaytag.tags.TableTag</tagclass>
<teiclass>org.displaytag.tags.TableTagExtraInfo</teiclass>
<bodycontent>JSP</bodycontent>
<info>
            Displays a list in an html table, formatting each item in the list according to the Column tags nested
            inside of this tag. Use the list attribute to indicate the Collection of data, in some scope, that the tag
            should operate on. Supports the export of the list data to alternative formats such as CSV, Excel, and XML.
            The contents of the list can be sorted, and the list can be broken into individual pages for display. If you
            use this tag in Struts, or in some other framework where the page is included via a jsp:include, you should
            use the requestURI attribute to indicate where tag generated links should point.
        </info>
<attribute>
<!--
                Reference to the object used as source for the table. Can be an expression like
                requestScope.object.property . You must define either the name attribute or the list attribute. Using
                "Name" is suggested.
            -->
<name>list</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                reference to the object used as source for the table. Can be an expression like
                requestScope.object.property. In the EL version of the taglibrary this must be an EL expression which
                points to the source object.
            -->
<name>name</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated in displaytag 1.0. Use list.property in "name" attribute. Not supported in the EL version of
                the tag.
            -->
<name>property</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated in displaytag 1.0. Use "pageScope.", "requestScope.", "sessionScope.", "applicationScope."
                prefixes in name. Not supported in the EL version of the tag.
            -->
<name>scope</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--number of records to be shown-->
<name>length</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--index of the first record to be shown-->
<name>offset</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--number of records in a page-->
<name>pagesize</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                Fully qualified class name for a TableDecorator. Use a TableDecorator to provide custom operations
                against the whole list, such as computing totals. Must extend org.displaytag.decorator.TableDecorator.
            -->
<name>decorator</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                When the present, links for sorting, exports, and paging are formed by adding any tag generated
                parameters to the value of requestURI attribute.
            -->
<name>requestURI</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                Enable/disable prepending of application context to generated links. Default is true, you can set it to
                false in order to generate cross-context links.
            -->
<name>requestURIcontext</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                Whitespace separated list containg the name of parameters which should NOT be forwarded during paging or
                sorting. You can use excludedParams="*" to match (exclude) any parameter.
            -->
<name>excludedParams</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>width</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute-->
<name>style</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute-->
<name>class</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated: use "class"-->
<name>styleClass</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html pass through attribute. Use css "border"-->
<name>border</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute-->
<name>cellspacing</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                html pass through attribute. Better using "padding" css attribute in style or class
            -->
<name>cellpadding</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>align</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>background</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>bgcolor</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>frame</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>height</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>hspace</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>rules</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute-->
<name>summary</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html "id" pass through attribute-->
<name>htmlId</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>vspace</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--enable/disable export. Valid values are true or false-->
<name>export</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                See "uid". The id attribute can't be a runtime expression in jsp 1.0 compliant containers, while uid
                will allow it.
            -->
<name>id</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                Unique id used to identify this table. The object representing the current row is also added to the
                pageContext under this name and the current row number is added using the key uid_rowNum. Two tables in
                the same page can't have the same uid (paging and sorting will affect both). If no "htmlId" is specified
                the same value will be used for the html id of the generated table.
            -->
<name>uid</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                Use 'page' if you want to sort only visible records, or 'list' if you want to sort the full list
            -->
<name>sort</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The index of the column that will be used by default for sorting (starting from 1)
            -->
<name>defaultsort</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The default order for the sorted column. Valid values are "ascending" (default) or "descending"
            -->
<name>defaultorder</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
</tag>
<tag>
<name>column</name>
<tagclass>org.displaytag.tags.ColumnTag</tagclass>
<bodycontent>JSP</bodycontent>
<info>
            Displays a property of a row object inside a table. MUST be nested inside of a Table tag. The value
            displayed will be the results of a decorator (if any); else the property named by the 'property' attribute;
            or if the 'property' attribute is null, then the results of evaluating the JSP body of the tag.
        </info>
<attribute>
<!--
                name of the property in the bean specified in the parent table tag (via the "name" attribute) mapped to
                this column
            -->
<name>property</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                name of the property in the bean specified in the parent table tag (via the "name" attribute) which will
                be used to sort values in the column. This can be used when the column body is filled or a decorator is
                used and column should sort on undeorated values.
            -->
<name>sortProperty</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--title of the column (text for the th cell)-->
<name>title</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                Resource key used to lookup the title value. Only works if "title" is not defined. Works together with a
                configured I18nResourceProvider, specified via the displaytag.properties file. By default, if JSTL is
                available, the JSTL provider is used, which makes this attribute work the same as fmt:message's key
                property.
            -->
<name>titleKey</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                By default, null values don't appear in the list. By setting 'nulls' to 'true', then null values will
                appear as "null" in the list (mostly useful for debugging). Defaults to 'false'.
            -->
<name>nulls</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated: use "sortable"-->
<name>sort</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--Set to 'true' to make the column sortable. Defaults to 'false'.-->
<name>sortable</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                Automatically hyperlink URLs and email addresses that appear in the column. Defaults to 'false'.
            -->
<name>autolink</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                Use this attribute to keep a column from being output during an export. The column will only render for
                the named media type(s) - it won't be added to the table if the current request media is not supported.
                Can be any space separated combination of 'html', 'csv', 'xml', 'all', or 'excel'. Defaults to 'all'.
                See the export page in the example webapp for more details.
            -->
<name>media</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The base URL used to construct the dynamic link. If this attribute is provided, then the data that is
                shown for this column is wrapped inside a <a href> tag with the url provided through this
                attribute. Typically you would use this attribute along with one of the struts-like param attributes
                (param*) to create a dynamic link so that each row creates a different URL based on the data that is
                being viewed. An empty href value will generate a link to the current page, preserving parameters just
                like for paging links.
            -->
<name>href</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The base URL used to construct the dynamic link. This attribute has the same functionality as the href
                attribute, but it pre-pends the contextPath.
            -->
<name>url</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The name of the request parameter that will be dynamically added to the generated href URL. The
                corresponding value is defined by the paramProperty and (optional) paramName attributes, optionally
                scoped by the paramScope attribute.
            -->
<name>paramId</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The name of a JSP bean that is a String containing the value for the request parameter named by paramId
                (if paramProperty is not specified), or a JSP bean whose property getter is called to return a String
                (if paramProperty is specified). The JSP bean is constrained to the bean scope specified by the
                paramScope property, if it is specified. If paramName is omitted, then it is assumed that the current
                object being iterated on is the target bean.
            -->
<name>paramName</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The name of a property of the current object being iterated on, whose return value will be used as the
                value of the parameter (named by the paramId attribute) that will be dynamically added to this href URL.
                If paramName is also specified the property will not be fetched from the object being iterated on, but
                from the bean specified by paramName. The support of paramProperty in conjunction with paramName will be
                probably removed in future: use paramProperty only if you need a property in the iterated object,
                elsewhere use only paramName (you can select a property using an expression name.property).
            -->
<name>paramProperty</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated - use Expressions in paramName. The scope within which to search for the bean specified by
                the paramName attribute. If not specified, all scopes are searched. If paramName is not provided, then
                the current object being iterated on is assumed to be the target bean.
            -->
<name>paramScope</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                If this attribute is provided, then the column's displayed is limited to this number of characters. An
                elipse (...) is appended to the end if this column is linked, and the user can mouseover the elipse to
                get the full text. Be careful on using this attribute for String which can contain html tags or
                entities, or together with the autolink attribute turned on: displaytag will do its best trying to avoid
                leaving unclosed tags or broken entities in the output, but a complex or bad input could lead to
                unattended results.
            -->
<name>maxLength</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                If this attribute is provided, then the column's displayed is limited to this number of words. An elipse
                (...) is appended to the end if this column is linked, and the user can mouseover the elipse to get the
                full text. Be careful on using this attribute for String which can contain html tags or entities, or
                together with the autolink attribute turned on: displaytag will do its best trying to avoid leaving
                unclosed tags or broken entities in the output, but a complex or bad input could lead to unattended
                results.
            -->
<name>maxWords</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated; html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>width</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                html pass through attribute; use this instead of directly coding presentational atttributes.
            -->
<name>class</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated: use "class"-->
<name>styleClass</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--"class" html attribute added only for header cells.-->
<name>headerClass</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated: use "headerClass"-->
<name>headerStyleClass</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>style</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>align</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>background</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>bgcolor</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>height</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>nowrap</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                @deprecated html attribute. Use "style" or "class" to set presentational attributes using css.
            -->
<name>valign</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The grouping level (starting at 1 and incrementing) of this column (indicates if successive contain the
                same values, then they should not be displayed). The level indicates that if a lower level no longer
                matches, then the matching for this higher level should start over as well. If this attribute is not
                included, then no grouping is performed.
            -->
<name>group</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The fully qualified class name of a class that should be used to "decorate" the underlying object being
                displayed. The class should implement org.displaytag.decorator.ColumnDecorator. If a decorator is
                specified for the entire table, then this decorator will decorate that decorator.
            -->
<name>decorator</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
</tag>
<tag>
<name>setProperty</name>
<tagclass>org.displaytag.tags.SetPropertyTag</tagclass>
<bodycontent>JSP</bodycontent>
<info>
            Sets the indicated property on the enclosing Table tag. MUST be nested within a Table tag. As an
            alternative, you may create a property file that holds sitewide defaults; see the configuration
            documentation or the DisplayPropertiesLoaderServlet javadoc for information.
        </info>
<attribute>
<!--The name of the property to set on the enclosing Table tag.-->
<name>name</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--
                The value to which the property is set. You can also set the property value in the tag body.
            -->
<name>value</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
</tag>
<tag>
<name>footer</name>
<tagclass>org.displaytag.tags.TableFooterTag</tagclass>
<bodycontent>JSP</bodycontent>
<info>
            Tag wich should be nested into a table tag to provide a custom table footer. The body of the tag is
            outputted as is in the generated table in the tfoot section.
        </info>
</tag>
<tag>
<name>caption</name>
<tagclass>org.displaytag.tags.CaptionTag</tagclass>
<bodycontent>JSP</bodycontent>
<info>
            Simple tag which mimics the html caption tag. Use it inside a table tag to display a caption.
        </info>
<attribute>
<!--html pass through attribute.-->
<name>style</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>class</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>id</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>title</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>lang</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>dir</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
</tag>
</taglib>
