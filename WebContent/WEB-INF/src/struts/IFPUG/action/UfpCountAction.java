/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.IFPUG.action;

import hibernate.IFPUG.IfpugEif;
import hibernate.IFPUG.IfpugEifDirectMethod;
import hibernate.IFPUG.IfpugEifRet;
import hibernate.IFPUG.IfpugIlf;
import hibernate.IFPUG.IfpugIlfDirectMethod;
import hibernate.IFPUG.IfpugIlfRet;
import hibernate.IFPUG.IfpugProduct;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.hibernate.HibernateException;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import business.IFPUG.DataFunctionBusiness;
import business.IFPUG.FpCountBusiness;
import business.IFPUG.RequirementBusiness;
import business.IFPUG.UfpCountBusiness;
import struts.IFPUG.form.UfpCountForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-02-2010
 * 
 * XDoclet definition:
 * @struts.action path="/ufpCount" name="ufpCountForm" scope="request" validate="true"
 * @struts.action-forward name="success" path="/IFPUG/dataFunction/directMethod.jsp" contextRelative="true"
 * @struts.action-forward name="failure" path="/IFPUG/failure.jsp" contextRelative="true"
 */
public class UfpCountAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws HibernateException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws HibernateException {
		UfpCountForm ufpCountForm = (UfpCountForm) form;// TODO Auto-generated method stub
		//获取从directMethod.JSP页面传过来的参数
		int ufpMethod = new Integer(ufpCountForm.getUfpMethod());
		int type = new Integer(ufpCountForm.getType());//已转换成0、1的ILF\EIF
		int dfId = new Integer(ufpCountForm.getDfId());
		
		int ufpCount;
		int complex;
		DataFunctionBusiness dfb = new DataFunctionBusiness();
		FpCountBusiness fcb = new FpCountBusiness();
		RequirementBusiness rb = new RequirementBusiness();
		IfpugProduct product = new IfpugProduct();
		
		IfpugIlf ilf = (IfpugIlf)dfb.queryIlfById(dfId);
		IfpugEif eif = (IfpugEif)dfb.queryEifById(dfId);
		boolean result = false;
		int figure = 0;//用于记录方法是否为空
		UfpCountBusiness ucb = new UfpCountBusiness(); //调用计算功能的业务逻辑层
		//根据方法的不同，调用不同函数计算功能点个数
		switch(ufpMethod){
		case 1://默认的UFP
			int defaultValue = 0;
			defaultValue = Integer.valueOf(ufpCountForm.getDefaultMethod()); //从form表单获取填入值
			if(type == 0){//如果是ILF的计算方法
				IfpugIlfDirectMethod method = ilf.getIfpugIlfDirectMethod();
				if( method == null){//如果该ILF文件没有对应的方法，新增
					method = new IfpugIlfDirectMethod();
					figure = 1;
				}
				method.setDefaultMethod(defaultValue);
				method.setUfpValue(defaultValue);
				method.setMethodType(Short.valueOf("1"));
				//更新数据库表ILF中UFPcount的值
				ilf.setUfpMethod(Short.valueOf(String.valueOf(ufpMethod))); //更新方法
				ilf.setUfpCount(defaultValue); //更新UFP个数值
				result = dfb.updateDataFunction(ilf);
				method.setIfpugIlf(ilf);
				if(figure == 1){
					dfb.insertMethod(method); //调用业务逻辑层函数插入
				}
				else {//如果该ILF文件对应的方法已存在，更新
					dfb.updateMethod(method);
				}
				product = ilf.getIfpugProduct();
							
			}
			else {//如果是EIF类型
				IfpugEifDirectMethod method = eif.getIfpugEifDirectMethod();
				if(method == null){
					method = new IfpugEifDirectMethod();
					figure = 1;
				}
				method.setDefaultMethod(defaultValue);
				method.setUfpValue(defaultValue);
				method.setMethodType(Short.valueOf("1"));
				//更新数据库表EIF中UFPcount的值
				eif.setUfpMethod(Short.valueOf(String.valueOf(ufpMethod))); //更新方法
				eif.setUfpCount(defaultValue);
				result = dfb.updateDataFunction(eif);
				method.setIfpugEif(eif);
			    if(figure == 1)	dfb.insertMethod(method);//调用业务逻辑层函数插入
			    else dfb.updateMethod(method);
			    product = eif.getIfpugProduct();
			}
			break;
		case 2://用户选择RET、DET的范围
			int retRange, detRange;
			retRange = Integer.valueOf(ufpCountForm.getRange_ret());
			detRange = Integer.valueOf(ufpCountForm.getRange_det());
			complex = ucb.getComplex_RangeMethod(detRange, retRange, type);//调用业务逻辑层函数，计复杂度
			ufpCount = ucb.getUfpCount(complex, type);//调用业务逻辑层函数，计算功能点个数
			//将此记录加入到method表格中
			if(type == 0){//如果是ILF的计算方法
				IfpugIlfDirectMethod method = ilf.getIfpugIlfDirectMethod();
				if( method == null){//如果该ILF文件没有对应的方法，新增
					method = new IfpugIlfDirectMethod();
					figure = 1;
				}
				method.setComplex(Short.valueOf(String.valueOf(complex)));
				method.setDetRange(Short.valueOf(String.valueOf(detRange)));
				method.setRetRange(Short.valueOf(String.valueOf(retRange)));
				method.setMethodType(Short.valueOf("2"));
				method.setUfpValue(ufpCount);
				//更新数据库表ILF中UFPcount的值
				ilf.setUfpMethod(Short.valueOf(String.valueOf(ufpMethod))); //更新方法
				ilf.setUfpCount(ufpCount);
				result = dfb.updateDataFunction(ilf);
				method.setIfpugIlf(ilf);
				if(figure == 1){
					dfb.insertMethod(method); //调用业务逻辑层函数插入
				}
				else {//如果该ILF文件对应的方法已存在，更新
					dfb.updateMethod(method);
				}
				product = ilf.getIfpugProduct();
			}
			else {//如果是EIF的计算方法
				IfpugEifDirectMethod method = eif.getIfpugEifDirectMethod();
				if(method == null){
					method = new IfpugEifDirectMethod();
					figure = 1;
				}
				method.setComplex(Short.valueOf(String.valueOf(complex)));
				method.setDetRange(Short.valueOf(String.valueOf(detRange)));
				method.setRetRange(Short.valueOf(String.valueOf(retRange)));
				method.setMethodType(Short.valueOf("2"));
				method.setUfpValue(ufpCount);
				eif.setUfpMethod(Short.valueOf(String.valueOf(ufpMethod))); //更新方法
				//更新数据库表EIF中UFPcount的值
				eif.setUfpCount(ufpCount);
				result = dfb.updateDataFunction(eif);
				method.setIfpugEif(eif);
			    if(figure == 1)	dfb.insertMethod(method);//调用业务逻辑层函数插入
			    else dfb.updateMethod(method);
			    product = eif.getIfpugProduct();
			}
			break;			
		case 3://用户输入RET、DET的个数
			int retValue, detValue;
			retValue = Integer.valueOf(ufpCountForm.getValue_ret());
			detValue = Integer.valueOf(ufpCountForm.getValue_det());
			complex = ucb.getComplex_valueMethod(detValue, retValue, type);//调用业务逻辑层函数，计复杂度
			ufpCount = ucb.getUfpCount(complex, type);//调用业务逻辑层函数，计算功能点个数
			//将此记录加入到method表格中
			if(type == 0){//如果是ILF的计算方法
				IfpugIlfDirectMethod method = ilf.getIfpugIlfDirectMethod();
				if( method == null){//如果该ILF文件没有对应的方法，新增
					method = new IfpugIlfDirectMethod();
					figure = 1;
				}
				method.setComplex(Short.valueOf(String.valueOf(complex)));
				method.setDetValue(detValue);
				method.setRetValue(retValue);
				method.setMethodType(Short.valueOf("3"));
				method.setUfpValue(ufpCount);
				ilf.setUfpMethod(Short.valueOf(String.valueOf(ufpMethod))); //更新方法
				//更新数据库表ILF中UFPcount的值
				ilf.setUfpCount(ufpCount);
				result = dfb.updateDataFunction(ilf);//更新数据库表中UFPcount的值
				method.setIfpugIlf(ilf);
				if(figure == 1){
					dfb.insertMethod(method); //调用业务逻辑层函数插入
				}
				else {//如果该ILF文件对应的方法已存在，更新
					dfb.updateMethod(method);
				}
				product = ilf.getIfpugProduct();
			}
			else {//如果是EIF的计算方法
				IfpugEifDirectMethod method = eif.getIfpugEifDirectMethod();
				if(method == null){
					method = new IfpugEifDirectMethod();
					figure = 1;
				}
				method.setComplex(Short.valueOf(String.valueOf(complex)));
				method.setDetValue(detValue);
				method.setRetValue(retValue);
				method.setMethodType(Short.valueOf("3"));
				method.setUfpValue(ufpCount);
				eif.setUfpMethod(Short.valueOf(String.valueOf(ufpMethod))); //更新方法
				//更新数据库表EIF中UFPcount的值
				eif.setUfpCount(ufpCount);
				result = dfb.updateDataFunction(eif);
				method.setIfpugEif(eif);
				if(figure == 1)	dfb.insertMethod(method);//调用业务逻辑层函数插入
				else dfb.updateMethod(method);
				product = eif.getIfpugProduct();
			}
			break;
		case 4://用户选择复杂度
			complex = Integer.valueOf(ufpCountForm.getComplexValue());//获得复杂度
			ufpCount = ucb.getUfpCount(complex, type);//调用业务逻辑层函数，计算功能点个数
			//将此记录加入到method表格中
			if(type == 0){//如果是ILF的计算方法
				IfpugIlfDirectMethod method = ilf.getIfpugIlfDirectMethod();
				if( method == null){//如果该ILF文件没有对应的方法，新增
					method = new IfpugIlfDirectMethod();
					figure = 1;
				}
				method.setComplex(Short.valueOf(String.valueOf(complex)));
				method.setMethodType(Short.valueOf("4"));
				method.setUfpValue(ufpCount);
				ilf.setUfpMethod(Short.valueOf(String.valueOf(ufpMethod))); //更新方法
				//更新数据库表中UFPcount的值
				ilf.setUfpCount(ufpCount);
				result = dfb.updateDataFunction(ilf);
				method.setIfpugIlf(ilf);
				if(figure == 1){
					dfb.insertMethod(method); //调用业务逻辑层函数插入
				}
				else {//如果该ILF文件对应的方法已存在，更新
					dfb.updateMethod(method);
				}
				product = ilf.getIfpugProduct();
			}
			else {//如果是EIF的计算方法
				IfpugEifDirectMethod method = eif.getIfpugEifDirectMethod();
				if(method == null){
					method = new IfpugEifDirectMethod();
					figure = 1;
				}
				method.setComplex(Short.valueOf(String.valueOf(complex)));
				method.setIfpugEif(eif);
				method.setMethodType(Short.valueOf("4"));
				method.setUfpValue(ufpCount);
				eif.setUfpMethod(Short.valueOf(String.valueOf(ufpMethod))); //更新方法
				//更新数据库表EIF中UFPcount的值
				eif.setUfpCount(ufpCount);
				result = dfb.updateDataFunction(eif);
				if(figure == 1)	dfb.insertMethod(method);//调用业务逻辑层函数插入
				else dfb.updateMethod(method);
				product = eif.getIfpugProduct();
			}
			break;
		default: ufpCount = 0; break;
		}
		product.setMeasureStatus(Short.valueOf("1"));	
		product.setUfpCount(fcb.dfpCount(product.getId())+fcb.tfpCount(product.getId()));
		rb.updateProduct(product); //估算完数据功能，产品已经部分估算。
		if(result==true){
			   return mapping.findForward("success");
		}else{
			   return mapping.findForward("failure");
		}
	}
}